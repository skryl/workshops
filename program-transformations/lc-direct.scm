(let ()
  (define lc
    (lambda (exp env)
      (begin
        (show exp)
        (if (symbol? exp)
            (env exp)
            (if (pair? exp)
                (if (eq? (car exp) 'sub1)
                    (- (lc (car (cdr exp)) env) 1)
                    (if (eq? (car exp) 'zero?)
                        (= (lc (car (cdr exp)) env) 0)
                        (if (eq? (car exp) '*)
                            (* (lc (car (cdr exp)) env)
                               (lc (car (cdr (cdr exp))) env))
                            (if (eq? (car exp) 'if)
                                (if (lc (car (cdr exp)) env)
                                    (lc (car (cdr (cdr exp))) env)
                                    (lc (car (cdr (cdr (cdr exp)))) env))

                                (if (eq? (car exp) 'lambda)
                                    (lambda (a)
                                      (lc (car (cdr (cdr exp)))
                                          (lambda (y) (if (eq? (car (car (cdr exp))) y) a (env y)))))
                                    ((lc (car exp) env)
                                     (lc (car (cdr exp)) env)))))))
                exp)))))

  (show (lc
         '(((lambda (fun)
              ((lambda (F)
                 (F F))
               (lambda (F)
                 (fun (lambda (x) ((F F) x))))))
            (lambda (factorial)
              (lambda (n)
                (if (zero? n)
                    1
                    (* n (factorial (sub1 n)))))))
           5)
         (lambda (y) 0))))
